{"ast":null,"code":"import _slicedToArray from \"/home/anand/Desktop/test/toaster-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/anand/Desktop/test/toaster-test/src/component/CreateFriendList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../store/actions/FriendListActions';\nimport { Card, TextField } from '@material-ui/core';\nlet id = 10;\n\nconst TweetUI = props => {\n  //  React Hook useState instead of state\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        friendName = _React$useState2[0],\n        setFriendName = _React$useState2[1];\n\n  const handleChange = event => {\n    const value = event.target.value; // set data Using Hook\n\n    setFriendName(value); //friend name should not be empty and on press of enter add friend to list\n\n    if (value && (event.keyCode === 13 || event.key == 'Enter')) {\n      handleAddFriend(value);\n    }\n  };\n\n  const handleAddFriend = value => {\n    let listComments = [];\n    listComments = [...props.friendsList, {\n      id: id++,\n      friendName: value,\n      favourite: false\n    }];\n    props.addFriend(listComments); // After submit Clear textarea\n\n    setFriendName('');\n  };\n\n  return React.createElement(Card, {\n    className: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"standard-name\",\n    placeholder: \"Type the name of a friend\",\n    value: friendName,\n    onChange: handleChange,\n    margin: \"normal\",\n    fullWidth: true,\n    onKeyPress: handleChange,\n    style: {\n      borderBottom: '1px solid gray'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => {\n  const friendsList = state.friendsList;\n  return {\n    friendsList\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addFriend: value => dispatch({\n      type: ActionTypes.ADD_FRIEND,\n      value\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TweetUI);","map":{"version":3,"sources":["/home/anand/Desktop/test/toaster-test/src/component/CreateFriendList.js"],"names":["React","connect","ActionTypes","Card","TextField","id","TweetUI","props","useState","friendName","setFriendName","handleChange","event","value","target","keyCode","key","handleAddFriend","listComments","friendsList","favourite","addFriend","borderBottom","mapStateToProps","state","mapDispatchToProps","dispatch","type","ADD_FRIEND"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,oCAA7B;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,mBAAhC;AAEA,IAAIC,EAAE,GAAG,EAAT;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEvB;AAFuB,0BAGaP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAHb;AAAA;AAAA,QAGhBC,UAHgB;AAAA,QAGJC,aAHI;;AAIvB,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B,CAD4B,CAE5B;;AACAH,IAAAA,aAAa,CAACG,KAAD,CAAb,CAH4B,CAI5B;;AACA,QAAIA,KAAK,KAAKD,KAAK,CAACG,OAAN,KAAkB,EAAlB,IAAwBH,KAAK,CAACI,GAAN,IAAa,OAA1C,CAAT,EAA6D;AACzDC,MAAAA,eAAe,CAACJ,KAAD,CAAf;AACH;AACJ,GARD;;AAUA,QAAMI,eAAe,GAAIJ,KAAD,IAAW;AAE/B,QAAIK,YAAY,GAAG,EAAnB;AACAA,IAAAA,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACY,WAAV,EAAuB;AAAEd,MAAAA,EAAE,EAAEA,EAAE,EAAR;AAAYI,MAAAA,UAAU,EAAEI,KAAxB;AAA+BO,MAAAA,SAAS,EAAE;AAA1C,KAAvB,CAAf;AACAb,IAAAA,KAAK,CAACc,SAAN,CAAgBH,YAAhB,EAJ+B,CAK/B;;AACAR,IAAAA,aAAa,CAAC,EAAD,CAAb;AACH,GAPD;;AASA,SACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,EAAE,EAAC,eADP;AAEI,IAAA,WAAW,EAAC,2BAFhB;AAGI,IAAA,KAAK,EAAED,UAHX;AAII,IAAA,QAAQ,EAAEE,YAJd;AAKI,IAAA,MAAM,EAAC,QALX;AAMI,IAAA,SAAS,MANb;AAOI,IAAA,UAAU,EAAEA,YAPhB;AAQI,IAAA,KAAK,EAAE;AAAEW,MAAAA,YAAY,EAAE;AAAhB,KARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAcH,CArCD;;AAuCA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,QAAML,WAAW,GAAGK,KAAK,CAACL,WAA1B;AACA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH,CAHD;;AAKA,MAAMM,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHL,IAAAA,SAAS,EAAGR,KAAD,IAAWa,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEzB,WAAW,CAAC0B,UAApB;AAAgCf,MAAAA;AAAhC,KAAD;AAD3B,GAAP;AAGH,CAJD;;AAMA,eAAeZ,OAAO,CAACsB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CnB,OAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../store/actions/FriendListActions';\nimport { Card, TextField } from '@material-ui/core';\n\nlet id = 10;\n\nconst TweetUI = (props) => {\n\n    //  React Hook useState instead of state\n    const [friendName, setFriendName] = React.useState('');\n    const handleChange = (event) => {\n        const value = event.target.value;\n        // set data Using Hook\n        setFriendName(value);\n        //friend name should not be empty and on press of enter add friend to list\n        if (value && (event.keyCode === 13 || event.key == 'Enter')) {\n            handleAddFriend(value);\n        }\n    }\n\n    const handleAddFriend = (value) => {\n\n        let listComments = [];\n        listComments = [...props.friendsList, { id: id++, friendName: value, favourite: false }];\n        props.addFriend(listComments);\n        // After submit Clear textarea\n        setFriendName('');\n    }\n\n    return (\n        <Card className=\"card\">\n            <TextField\n                id=\"standard-name\"\n                placeholder=\"Type the name of a friend\"\n                value={friendName}\n                onChange={handleChange}\n                margin=\"normal\"\n                fullWidth\n                onKeyPress={handleChange}\n                style={{ borderBottom: '1px solid gray' }}\n            />\n        </Card>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const friendsList = state.friendsList\n    return { friendsList }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addFriend: (value) => dispatch({ type: ActionTypes.ADD_FRIEND, value })\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TweetUI);\n"]},"metadata":{},"sourceType":"module"}