{"ast":null,"code":"import _slicedToArray from \"/home/anand/Desktop/test/toaster-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/anand/Desktop/test/toaster-test/src/component/ShowFriendsList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as ActionTypes from '../store/actions/FriendListActions';\nimport { Card, Button, Typography, Paper, Grid, IconButton, CardContent, BottomNavigation } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FavouriteSelectedIcon from '@material-ui/icons/Grade';\nimport FavouriteIcon from '@material-ui/icons/GradeOutlined';\n\nconst ShowFriends = props => {\n  // React Hooks for Editing the Text and updating the values\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        newText = _React$useState2[0],\n        setNewText = _React$useState2[1];\n\n  const handleEdit = (item, check) => {\n    // set default text in EditBox\n    if (check === 'edit') {\n      setNewText(item.value);\n    }\n\n    const updateValue = {\n      id: item.id,\n      value: newText // onClick of Ok set value in redux\n\n    };\n\n    if (check === 'ok') {\n      props.handleUpdate(updateValue);\n    }\n  };\n\n  if (!props.friendsList) {\n    return null;\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Card, {\n    className: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, props.friendsList.map(item => {\n    return React.createElement(Grid, {\n      container: true,\n      key: item.id,\n      className: \"grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, console.log(item), React.createElement(Typography, {\n      variant: \"h6\",\n      component: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \" \", item.friendName), React.createElement(Typography, {\n      variant: \"body2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"xxx friends in common\")), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      variant: \"outlined\",\n      onClick: props.handleDelete.bind(item.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(DeleteIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      variant: \"outlined\",\n      onClick: () => handleEdit(item, 'edit'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, item.favourite ? React.createElement(FavouriteIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }) : React.createElement(FavouriteSelectedIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }))));\n  })));\n};\n\nconst mapStateToProps = state => {\n  return {\n    friendsList: state.friendsList\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleDelete: id => dispatch({\n      type: ActionTypes.DELETE_FRIEND,\n      id\n    }),\n    handleUpdate: item => dispatch({\n      type: ActionTypes.CHANGE_FAVOURITE_LIST,\n      item\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowFriends);","map":{"version":3,"sources":["/home/anand/Desktop/test/toaster-test/src/component/ShowFriendsList.js"],"names":["React","connect","ActionTypes","Card","Button","Typography","Paper","Grid","IconButton","CardContent","BottomNavigation","DeleteIcon","FavouriteSelectedIcon","FavouriteIcon","ShowFriends","props","useState","newText","setNewText","handleEdit","item","check","value","updateValue","id","handleUpdate","friendsList","map","console","log","friendName","handleDelete","bind","favourite","mapStateToProps","state","mapDispatchToProps","dispatch","type","DELETE_FRIEND","CHANGE_FAVOURITE_LIST"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport * as ActionTypes from '../store/actions/FriendListActions'\nimport { Card, Button, Typography, Paper, Grid, IconButton, CardContent, BottomNavigation } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FavouriteSelectedIcon from '@material-ui/icons/Grade'\nimport FavouriteIcon from '@material-ui/icons/GradeOutlined'\n\n\nconst ShowFriends = (props) => {\n    // React Hooks for Editing the Text and updating the values\n    const [newText, setNewText] = React.useState('');\n\n    const handleEdit = (item, check) => {\n\n        // set default text in EditBox\n        if (check === 'edit') {\n            setNewText(item.value);\n        }\n\n        const updateValue = { id: item.id, value: newText }\n\n        // onClick of Ok set value in redux\n        if (check === 'ok') {\n            props.handleUpdate(updateValue);\n        }\n    }\n\n    if (!props.friendsList) {\n        return null;\n    }\n\n    return (\n        <React.Fragment>\n            <Card className=\"card\">\n                {props.friendsList.map((item) => {\n                    return (\n                        <Grid container key={item.id} className=\"grid-container\">\n                            <Grid item xs={8}>\n                            {console.log(item)}\n                                <Typography variant=\"h6\" component=\"h6\"> {item.friendName}</Typography>\n                                <Typography variant=\"body2\">xxx friends in common</Typography>\n                            </Grid>\n                            <Grid item xs={2}>\n                                <Button size=\"small\" variant=\"outlined\" onClick={props.handleDelete.bind(item.id)} >\n                                    <DeleteIcon />\n                                </Button>\n                            </Grid>\n                            <Grid item xs={2}>\n                                <Button size=\"small\" variant=\"outlined\" onClick={() => handleEdit(item, 'edit')}>\n                                    {item.favourite ?\n                                        <FavouriteIcon /> :\n                                        <FavouriteSelectedIcon />\n                                    }\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    )\n                })}\n            </Card>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        friendsList: state.friendsList\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleDelete: (id) => dispatch({ type: ActionTypes.DELETE_FRIEND, id }),\n        handleUpdate: (item) => dispatch({ type: ActionTypes.CHANGE_FAVOURITE_LIST, item })\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowFriends);"]},"metadata":{},"sourceType":"module"}